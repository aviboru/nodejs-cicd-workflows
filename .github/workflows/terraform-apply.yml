name: Terraform Apply

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      assume_role:
        required: true

jobs:
  apply:
    name: Terraform Apply to ${{ inputs.environment }}
    runs-on: ubuntu-latest

    if: |
      (inputs.environment == 'dev' && startsWith(github.ref, 'refs/heads/feature/')) ||
      (inputs.environment == 'qa' && github.ref == 'refs/heads/develop') ||
      (inputs.environment == 'uat' && github.ref == 'refs/heads/release') ||
      (inputs.environment == 'uat' && startsWith(github.ref, 'refs/heads/hotfix/')) ||
      (inputs.environment == 'prod' && github.ref == 'refs/heads/main')

    environment: ${{ inputs.environment }}

    permissions:
      contents: write
      id-token: write

    env:
      AWS_REGION: us-west-2
      TF_WORKSPACE: ${{ inputs.environment }}
      TF_VAR_assume_role_arn: ${{ secrets.assume_role }}

    steps:
      # - name: Wait for Approval (Prod Only)
      #   if: inputs.environment == 'prod'
      #   uses: trstringer/manual-approval@v1
      #   with:
      #     secret: ${{ secrets.GITHUB_TOKEN }}
      #     approvers: your-username  # Replace with your GitHub username or team

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      # - name: Select Workspace
      #   run: terraform workspace select $TF_WORKSPACE || terraform workspace new $TF_WORKSPACE

      # - name: Terraform Plan
      #   run: terraform plan -out=tfplan -input=false

      # - name: Terraform Apply
      #   run: terraform apply -input=false tfplan

      - name: Merge feature to develop
        if: inputs.environment == 'dev' && startsWith(github.ref, 'refs/heads/feature/')
        run: echo "(Placeholder) Merge feature branch to develop"

      - name: Merge hotfix to release
        if: inputs.environment == 'uat' && startsWith(github.ref, 'refs/heads/hotfix/')
        run: echo "(Placeholder) Merge hotfix branch to release"

      - name: Tag main branch
        if: inputs.environment == 'prod' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION_TAG="v$(date +'%Y.%m.%d.%H%M')"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV          
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $VERSION_TAG
          git push origin $VERSION_TAG
          gh release create "$VERSION_TAG" --generate-notes --title "Release $VERSION_TAG"